Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-23T23:26:25-04:00

====== Sqlite3 ======
Created Sunday 23 August 2020

import sqlite3

**How to initialize sqlite3:**

	conn = sqlite3.connect(DB)   ....DB is the database			#can also pass in ":memory:" where "DB" goes
	cur = conn.cursor()
	
	
**How to create a table:**
		**Player is a namedtuple from collections**
		players = []
		for row in reader:
			players.append(**Player**(name=row['Player'],
								  year=row['Draft_Yr'],
								  first_year=row['first_year'],
								  team=row['Team'],
								  college=row['College'],
								  active=row['Yrs'],
								  games=row['Games'],
								  avg_min=row['Minutes.per.Game'],
								  avg_points=row['Points.per.Game']))
	
		cur.execute('''CREATE TABLE IF NOT EXISTS players
					  (name, year, first_year, team, college, active,
					  games, avg_min, avg_points)''')
		cur.executemany('INSERT INTO players VALUES (?,?,?,?,?,?,?,?,?)', players)
		conn.commit()
		
		**Example 2:**
			cur.execute("CREATE TABLE name('x' TEXT PRIMARY KEY, 'y' REAL, 'z' INTEGER)
		
		**Example 3:**
			foo = 'name'
			bar = 'x TEXT PRIMARY KEY, y REAL, z INTEGER'
			cur.execute(f"CREATE TABLE {foo}({bar})")

**How to find the total number of transactions made within the table:**
		print(conn.total_changes)
	

**Examples of how to query using sqlite3:**

	def player_with_max_points_per_game():
		"""The player with highest average points per game (don't forget to CAST to
		   numeric in your SQL query)"""
		cur.execute('SELECT name, MAX(CAST(avg_points as REAL)) FROM players')		#get name of player with the max avg points
		data = cur.fetchall()														#avg_points is a string; need to CAST/change
		for d in data:															#to REAL/float to use MAX function
			return d[0]
	
	
	def number_of_players_from_duke():
		"""Return the number of players with college == Duke University"""
		lst = []
		cur.execute('SELECT name FROM players WHERE college = "Duke University"')
		data = cur.fetchall()
		for d in data:
			lst.append(d)
		return len(lst)
	
	
	def avg_years_active_players_stanford():
		"""Return the average years that players from "Stanford University
		   are active ("active" column)"""
		avg_years = 0
		cur.execute('SELECT avg(active) FROM players WHERE college = "Stanford University"')	#use avg function to get the average amount
		data = cur.fetchall()															#of years a player was active based on the
		for d in data:																#criteria passed in
			avg_years += d[0]
		return round(avg_years, 2)
	        
	
	
	def year_with_most_drafts():
		"""Return the year with the most drafts, in SQL you can use GROUP BY"""
		years = {}
		cur.execute('SELECT year FROM players')
		data = cur.fetchall()
		for d in data:
			year = d[0]
			years.setdefault(year, 0)
			years[year] += 1
		return max(years, key=years.get)


**How to Delete From an SQL/sqlite3 Table:**
	self.cursor.execute(f'DELETE FROM table_name WHERE name = joey')
	 
	OR
	
	table = 'name'
	target = ('bitecoins', 15)
	self.cursor.execute(f'DELETE FROM {table} WHERE {target[0]} = {target[1]}')
	

**How to Select or Query From a Table:**
	see the above functions for some good examples
	
	Also:
		**If using variables to represent fields in the query:**
			query = db.cursor.execute(f"SELECT * FROM {self.table} WHERE {self.target[0]} = ? ", (self.target[1],),).fetchall()
			**pay special attention to the above right after the final ' " '. Tricky syntax that is not intuitive.**
			

**How to Insert Data Into a Table:**
	items = [('alan', 13), ('sarah', 20), ('susan', 15)]
	table = 'name'
	self.cursor.executemany(f"INSERT INTO {table} VALUES (?,?)", items)		#need one '?' per column in the table, also, each tuple in the list
																					#needs to have as many values as there are columns in the table


**How to Update Data in the Table:**
	table = 'name'
	new_value = ('person', 'joey')
	target = ('coins', 11)
	cursor.execute(f"UPDATE {table} SET {new_value[0]} = ? WHERE {target[0]} = ?", (new_value[1], target[1]))
	
	for new_value and target, the item at index 0 is the column name, and the item at index 1 is the value to supply to the statement
	
	The code above basically says "**update the table by setting the 'person' column = 'joey' in the row where the 'coins' column = 11"**


**How to Get Column Names:**
	names = [description[0] for description in cursor.description]
	

**NOTE: **
		no "." in table schema when creating table.
		
	
https://www.sqlitetutorial.net/sqlite-python/
https://www.digitalocean.com/community/tutorials/how-to-use-the-sqlite3-module-in-python-3#step-1-%E2%80%94-creating-a-connection-to-a-sqlite-database
https://www.kite.com/python/docs/sqlite3.Cursor.executemany
