Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-08-11T22:45:27-04:00

====== Array Sequences ======
Created Tuesday 11 August 2020

Three types of arrays: **list, tuple, **or **string**

All 3 support indexing


**Problem:  Given two different strings, compare them to see if they are anagrams (all letters in phrase 1 are in phrase 2)**

def anagram(s1, s2):
	//#remove capital letters and spaces//
	s1 = s1.replace(' ', '').lower()
	s2 = s2.replace(' ', '').lower()
	
	return sorted(s1) == sorted(s2)
	
	
**ANOTHER SOLUTION:**

def anagram(s1, s2):
	//#remove capital letters and spaces//
	**s1 = s1.replace(' ', '').lower()**
**      s2 = s2.replace(' ', '').lower()**

	**if len(s1) ! = len(s2):**
		**return False**
	
	**count = {}**
	
	**for letter in s1:**
		**if letter in count:**
			**count[letter] += 1**
		**else:**
			**count[letter] = 1**
			
	**for letter in s2:**
		**if letter in count:**
			**count[letter] -= 1**
		**else:**
			**count[letter] = 1**
			
	**for k in count:**
		**if count[k] ! = 0:**
			**return False**
	
	**return True**
	
	
	
	
**PROBLEM TWO: ARRAY PAIR SUM....given an integer array, output the unique pairs that sum to a given k.**

def pair_sum(array, k):
	if len(array) < 2:
		return print('Too small.')
	
	seen = set()
	output = set()
	
	for num in array:
		target = k - num
		
		if target not in seen:
			seen.add(num)
		else:
			output.add((min(num, target), max(num, target)))
	
	print('\n'.join(map(str, list(output))))



**PROBLEM THREE: LARGEST SUM OF POSITIVE AND NEGATIVE INTEGERS:**

def largest(arr):
	if len(arr) = = 0:
		return 'Too small.'
		
	max_sum = arr[0]
	current_sum = arr[0]
	
	for num in arr[1:]:
		current_sum = max(current_sum + num, num)
		max_sum = max(current_sum, max_sum)
		
	return max_sum
	


**PROBLEM FOUR OPTIMAL FUND RAISING:**

def max_fund(village):
	best_sum, current_sum = 0, 0
	best_start, best_end = 0, 0
	
	if all(n <= 0 for n in village):
		print('no money')
		return 0, 0, 0
	
	else: 
		current_sum += x
	
	for current_end, x in enumerate(village):
		if current_sum <= 0:
			current_start = current_end
			current_sum = x
		
		else:
			current_sum += x
			
		if current_sum > best_sum:
			best_sum = current_sum
			best_start = current_start
			best_end = current_end
			
		return best_sum, best_start + 1, best_end + 1
		
**PROBLEM FIVE - REVERSE A STRING:**

def reverse(string):
	return " ".join(s.split()[::-1])
	
	**OR**
	
def reverse(s):
	length = len(s)
	spaces = ' '
	words = [ ]
	i = 0
	
	while i < length:
		if s[i] not in spaces:
			word_start = i
			
			while i < length and s[i] not in spaces:
				i += 1
			
			words.append(s[word_start:i])
		
		i += 1
		
	return " ".join(words(reversed(words))


**PROBLEM: GIVEN TWO ARRAYS, IS ONE ARRAY A ROTATION OF THE OTHER (same size, but different index values):**

def rotation(lst1, lst2):
	if len(lst1) ! = len(lst2):
		return False
		
	key = lst1[0]
	key_index = 0
	
	for i in range(len(lst2)):
		if lst2[i] == key:
			key_index = i

			break
	
	if key_index == 0:
		return False
		
	for x in range(len(lst1)):
		l2_index = (key_index + x)  % len(lst1)
		
		if list1[x] â‰  lst2[l2_index]:
			return False
	return True


**PROBLEM: DETERMINE THE PERIMETER OF AN "ISLAND" INSIDE OF A GRID:**

def island_size(grid):
	perim, count = 0, 0
	dirs = [[-1, 0], [0, 1], [0, -1], [1, 0]]
	
	for x in range(len(grid)):
		for y in range(len(grid[0])):
			if grid[x][y] == 1:
				perim += 4
				
				for dir in dirs:
					nx, ny = x + dir[0], y + dir[1]
					if nx >= 0 and ny >= 0 and nx < len(grid) and ny < len(grid[0]):
						if grid[nx][ny] == 1:
							count += 1
	
	return perim - count
	
	
**PROBLEM: CONVERT A NUMBER FROM BASE-10 TO ANY OTHER BASE:**

def dec_to_base(num, base):							**RECURSIVE SOLUTION:**
	x = num								
	digits = ''										  **def dec_to_base(num, base):**
	remainder = ''										**if num < base:**
																	   **return num**
	for i in range(x, -1, -1):
		if base ** i > num:								  **else:**
			x -= 1										 **return 10 * dec_to_base(num // base, base) + (num % base)**
			if base ** j <= num:
				break
				
	for j in range(x, -1, -1):
		digits += str(num // base ** j)
		remainder = str(num % base ** j)
		num = int(remainder)
		
	return int(digits)
	
	

**PROBLEM: RETURN COMMON ELEMENTS IN TWO ARRAYS:**

def common_elements(a, b):
	p1 = 0
	p2 = 0
	
	result = [ ]
	
	while p1 < len(a) and p2 < len(b):
		if a[p1] == b[p2]:
			result.append(a[p1])
			p1 += 1
			p2 += 2
		
		elif a[p1] > b[p2]:
			p2 += 1
			
		else:
			p1 += 1
			
	return result
	
	
**PROBLEM: MINESWEEPER:**
	Write a function that will take 3 args: **bombs**(list of bomb locations), rows, columns
	
def mine_sweeper(bombs, nrs, ncs):
	field = [[0 for i in range(ncs)] for j in range(nrs)]
	
	for bomb_location in bombs:
		(bomb_row, bomb_col) = bomb_location
		field[bomb_row][bomb_col] = -1
		
		row_range = range(bomb_row - 1, bomb_row + 2)
		col_range = range(bomb_col -1, bomb_col + 2)
		
		for i in row_range:
			current_i = i
			for j in col_range:
				current_j = j
				if (0 <= i < num_rows and 0 <= j a < num_cols) and field[i][j] ! = -1:
					field[i][j] += 1
	
	return field
	
	pick up at 2:52:20



