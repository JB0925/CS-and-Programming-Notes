Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-04-22T11:59:04-04:00

====== Example Base Class ======
Created Friday 22 April 2022

The template pattern usually has a Base class, one that has methods that can / need to be implemented by any sub classes that extend it. Here is an example, called **abstractExport** class:

public abstract class AbstractExporter {

	private final Report report;
	private final PrintStream out;

	AbstractExporter(Report report, PrintStream out) {
		this.report = report;
		this.out = out;
	}

	public final void export() {
		beforeLabels(out);
		handleLabels(out, report.getLabels());
		afterLabels(out);

		beforeRecords(out);
		handleRecords();
		afterRecords(out);
	}

	protected void beforeLabels(PrintStream out) {
	}

	protected abstract void handleLabels(PrintStream out, List<String> labels);

	protected void afterLabels(PrintStream out) {
	}

	protected void beforeRecords(PrintStream out) {
	}

	private void handleRecords() {
		List<List<String>> records = report.getRecords();
		if (records.size() == 1) {
			handleRecord(out, records.get(0), true, true);
		} else if (records.size() >= 2) {
			handleRecord(out, records.get(0), true, false);
			for (List<String> record : records.subList(1, records.size() - 1)) {
				handleRecord(out, record, false, false);
			}
			handleRecord(out, records.get(records.size() - 1), false, true);
		}
	}

	protected abstract void handleRecord(PrintStream out, List<String> record, boolean first, boolean last);

	protected void afterRecords(PrintStream out) {
	}
}
