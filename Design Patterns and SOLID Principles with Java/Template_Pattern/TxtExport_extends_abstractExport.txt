Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-04-22T12:03:04-04:00

====== TxtExport extends abstractExport ======
Created Friday 22 April 2022

**What Can We See Below?**
 - We can see that **TxtExporter ** uses methods from AbstractExporter, but it is also able to have its own fields and implementations of those methods. The same will be true for our next class, CsvExporter.

public final class TxtExporter extends AbstractExporter {

	private static final String BORDER = "*";
	private static final String LEFT_BORDER = BORDER + " ";
	private static final String RIGHT_BORDER = " " + BORDER;
	private static final String SEPARATOR = " | ";

	private final List<Integer> widths;

	private final int totalWidth;

	public TxtExporter(Report report, PrintStream out) {
		super(report, out);
		this.widths = calcWidths(report);

		totalWidth = widths.stream().mapToInt(Integer::intValue).sum()
			+ LEFT_BORDER.length()
			+ SEPARATOR.length() * (report.getLabels().size() - 1)
			+ RIGHT_BORDER.length();
	}

	private List<Integer> calcWidths(Report report) {
		List<Integer> widths = new ArrayList<>();
		report.getLabels().forEach(l -> widths.add(l.length()));
		for (List<String> record : report.getRecords()) {
			for (int i = 0; i < widths.size(); i++) {
				int maxWidth = widths.get(i);
				int width = record.get(i).length();
				if (width > maxWidth) {
					widths.set(i, width);
				}
			}
		}
		return widths;
	}

	@Override
	protected void beforeLabels(PrintStream out) {
		printBorder(out);
	}

	@Override
	protected void handleLabels(PrintStream out, List<String> labels) {
		printStrings(out, labels);
	}

	@Override
	protected void afterLabels(PrintStream out) {
		printBorder(out);
	}

	@Override
	protected void handleRecord(PrintStream out, List<String> record, boolean first, boolean last) {
		printStrings(out, record);
	}

	@Override
	protected void afterRecords(PrintStream out) {
		printBorder(out);
	}

	private void printBorder(PrintStream out) {
		for (int i = 0; i < totalWidth; i++) {
			out.print(BORDER);
		}
		out.println();
	}

	private void printStrings(PrintStream out, List<String> strings) {
		out.print(LEFT_BORDER);
		out.print(IntStream.range(0, strings.size())
			.mapToObj(i -> {
				String fmt = String.format("%%%ss", widths.get(i));
				return String.format(fmt, strings.get(i));
			})
			.collect(Collectors.joining(SEPARATOR)));
		out.print(RIGHT_BORDER);
		out.println();
	}
}
