Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-01-06T22:50:22-05:00

====== Document Distance Analysis ======
Created Wednesday 06 January 2021

{{.\pasted_image001.png}}
**Main Function:**
	complexity is O(W1 ** 2 + W2 ** 2)
	This is because it runs the functions for **two** documents, and the complexity of running it **once** for **one** document is **W**2**
	Also, **W dominates L** (seen in the bottom of the picture) **because there will always be more total words than there are unique words**
	


**Count Frequency Cost/Complexity:**
{{.\pasted_image002.png}}

a document has **W** words
When turned into a document vector, you get **L** unique words
pretend that all words are roughly the same length

This function takes a list of words ['The', 'fox', 'is', 'in', 'the', 'barn']
And turns it into [['The', 2], ['fox', 1], ['is', 1], ['in', 1], ['barn', 1]]

**Line			Runtime				Cost**
2				1					1
3				1					W
4				1					L * W
5				W					L * W
6				1					W - L
7				1					W - L
8				1					L
9				1					L
10				1					1

Worst case, line 4 (nested for loop) runs for every word, each time all the way through the growing document vector list. This would happen if none of the words were already in the document vector list (all unique words).

Line 6 only runs W - L times because it breaks out of the inner loop as soon as it satisfies line 6. So, if the word is not unique (it's already in L), we add one and then break.

Line 5 is the dominant term because it is L * W, but the runtime is W (runs for each word of the word list)
Line 5 runs W times because it runs once for each word in the word list.



**Speeding Up Document Distance Algorithm:**
{{.\pasted_image004.png}}

The only change from **DocDist1** is "**get_words_from_line_list(L):"**
	the difference is using **.extend()** instead of "+" to concatenate the list. 
	it gives a 30% speed improvement
	
	

**Docdist2 Explanation:**
	**line 4** returns a list with K elements per line, where **K** is the number of words per line
	**line 5** adds a smaller list to an already existing bigger list, whereas using the "+" operator  means creating a brand new list and copying over all elements from **BOTH** list to it (**O**(**N2)**). With extend, it is only O(N).
	
	Total running time is **K * Z **(number of words per line * number of lines), which is equal to **W** (number of words in the entire document)
	
	
	**Inner Product:**
		If you **Sort** the document vector by word, you can then do a comparison by element on the document vector to check if the new word is in the Vector or not. This reduces the cost of **Count Frequency** from **O(W1 * W2 + L1 * L2) **to **O(L1 log2 L2)**, or **(O(L1 + L2) in the worst case. **This is a little bit like **Merge Sort**, without the divide and conquer aspect.
		
	{{.\pasted_image005.png}}    # similar to merge sort to compute inner product instead of iteration through a list.
	
	
	
	






