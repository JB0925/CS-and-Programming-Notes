Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-12-09T00:00:10-05:00

====== Example ======
Created Thursday 09 December 2021

This is a custom hook that uses **useReducer** and **promise** syntax to fetch new data every time a name changes. We **DO NOT** want to use the callback function in our **dependency array** normally, because it will change / be recreated every time there is a re-render. **However**, if we use **useCallback**, we can memoize it and get around this. 

In this example, the **useEffect** instance in **useAsync** takes the **asyncCallback** in the dependency array, meaning it will run again as the **asyncCallback** changes. 

In the PokemonInfo component, we call **useCallback** and pass in the callback function. The callback function will be called again / recreated whenever the pokemonName changes, which will then run the **useEffect** in **useAsync.**

**The Reducer Function:**
function asyncReducer(state, action) {
  switch (action.type) {
	case 'pending': {
	  return {status: 'pending', data: null, error: null}
	}
	case 'resolved': {
	  return {status: 'resolved', data: action.data, error: null}
	}
	case 'rejected': {
	  return {status: 'rejected', data: null, error: action.error}
	}
	default: {
	  throw new Error(`Unhandled action type: ${action.type}`)
	}
  }
}

**The useAsync Function**

**NOTE: **This **useAsync** hook takes a callback function that, if successful, has an async aspect to it.

function useAsync (asyncCallback, initialState, dependencies) {
  **// setting state via useReducer**
  const [state, dispatch] = React.useReducer(asyncReducer, {
	status: 'idle',
	data: null,
	error: null,
	...initialState
  })
  
  **// this will be ran every time our dependencies change (in this example, the asyncCallback function)**
  React.useEffect(() => {
	const promise = asyncCallback();     **// calling our async callback function**
	if (!promise) {
	  return			**// returning early if it is rejected**
	}
	dispatch({type: 'pending'})  **// dispatch the "pending" action**
	promise.then(   **// once we have the promise, if we get data, dispatch the 				"data" action. Otherwise, dispatch the "error" action.**
	  data => {
		dispatch({type: 'resolved', data})
	  },
	  error => {
		dispatch({type: 'rejected', error})
	  },
	)
    
  }, [**asyncCallback**);  
  **return state;        // need to return the state to be used in the actual Component**
};



**The Component That Uses useAsync:**

function PokemonInfo({pokemonName}) {
  **// create the callback function for "useAsync"**
  const callback = useCallback(() => {
	if (!pokemonName) return;
	  return fetchPokemon(pokemonName);   **// async aspect of the callback**
  },[**pokemonName**]);

  **const state = useAsync(callback,{ status: pokemonName ? 'pending' : 'idle' }, [pokemonName])**
  
  **// calling "useAsync" with the callback, the initialState object, and the dependencies (used as the dependency array in useEffect.**

  const {status, data, error} = state

  switch (status) {
	case 'idle':
	  return <span>Submit a pokemon</span>
	case 'pending':
	  return <PokemonInfoFallback name={pokemonName} />
	case 'rejected':
	  throw error
	case 'resolved':
	  return <PokemonDataView pokemon={data} />
	default:
	  throw new Error('This should be impossible')
  }
}
