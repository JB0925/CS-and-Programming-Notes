Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-12-13T23:08:59-05:00

====== Context Module Functions ======
Created Monday 13 December 2021

**Extract Helper Function**

This function can help improve performance and reduce duplication.

The idea is to take a situation where you are using **useReducer** and **useContext**, and pass the **dispatch** function in the **context**, so that it can be accessed from inside of other components.

**The Code and Walkthrough:**

// Context Module Functions
// http://localhost:3000/isolated/exercise/01.js

import * as React from 'react'
import {dequal} from 'dequal'

// ./context/user-context.js

import * as userClient from '../user-client' **// simulates an API call that updates a user; will return an updated user object UNLESS the word fail is included in the updates**

import {useAuth} from '../auth-context' **// returns a created context, with a user object as a default value....USER is this value**

const UserContext = React.createContext()
UserContext.displayName = 'UserContext'

**// the reducer function**

**function userReducer(state, action)** {
  switch (action.type) {
	case 'start update': {
	  return {
		...state,
		user: {...state.user, ...action.updates},
		status: 'pending',
		storedUser: state.user,
	  }
	}
	case 'finish update': {
	  return {
		...state,
		user: action.updatedUser,
		status: 'resolved',
		storedUser: null,
		error: null,
	  }
	}
	case 'fail update': {
	  return {
		...state,
		status: 'rejected',
		error: action.error,
		user: state.storedUser,
		storedUser: null,
	  }
	}
	case 'reset': {
	  return {
		...state,
		status: null,
		error: null,
	  }
	}
	default: {
	  throw new Error(`Unhandled action type: ${action.type}`)
	}
  }
}

**// returns UserContext.provider to wrap around the other components**

**function UserProvider({children})** {
  const {user} = useAuth()
  const [state, dispatch] = React.useReducer(userReducer, {
	status: null,
	error: null,
	storedUser: user,
	user,
  })
  const value = [state, dispatch] **// the value to pass to the Provider...note that it also returns the dispatch function**
  return <UserContext.Provider value={value}>{children}</UserContext.Provider>
}

**// returns the "value" array from the UserContext.Provider**
function useUser() {
  const context = React.useContext(UserContext)
  if (context === undefined) {
	throw new Error(`useUser must be used within a UserProvider`)
  }
  return context
}

**// takes a dispatch function (comes from useUser aka the Provider), the user object from Auth, and "updates", which is the formState below. Updates the user object when the form is submitted.**

**function updateUser (dispatch, user, updates)** {
  dispatch({type: 'start update', updates})
  return userClient.updateUser(user, updates).then(
	updatedUser => dispatch({type: 'finish update', updatedUser}),
	error => dispatch({type: 'fail update', error}),
  )
}

// export {UserProvider, useUser}

// src/screens/user-profile.js
// import {UserProvider, useUser} from './context/user-context'

**function UserSettings(**) {
  const [{user, status, error}, userDispatch] = useUser()

  const isPending = status === 'pending'
  const isRejected = status === 'rejected'

  const [formState, setFormState] = React.useState(user) **// starts out as the user object**

  const isChanged = !dequal(user, formState) **// third party library to compare two objects for equality**

**// generic onChange function for form**
  function handleChange(e) {
	setFormState({...formState, [e.target.name]: e.target.value})
  }

**// onSubmit function that calls updateUser, which basically uses the dispatch**
** function from UserContext.Provider, and then updates the user object**

  function handleSubmit(event) {
	event.preventDefault()
	**updateUser(userDispatch, user, formState);**
  }

  return (
	<form onSubmit={handleSubmit}>
	  <div style={{marginBottom: 12}}>
		<label style={{display: 'block'}} htmlFor="username">
		  Username
		</label>
		<input
		  id="username"
		  name="username"
		  disabled
		  readOnly
		  value={formState.username}
		  style={{width: '100%'}}
		/>
	  </div>
	  <div style={{marginBottom: 12}}>
		<label style={{display: 'block'}} htmlFor="tagline">
		  Tagline
		</label>
		<input
		  id="tagline"
		  name="tagline"
		  value={formState.tagline}
		  onChange={handleChange}
		  style={{width: '100%'}}
		/>
	  </div>
	  <div style={{marginBottom: 12}}>
		<label style={{display: 'block'}} htmlFor="bio">
		  Biography
		</label>
		<textarea
		  id="bio"
		  name="bio"
		  value={formState.bio}
		  onChange={handleChange}
		  style={{width: '100%'}}
		/>
	  </div>
	  <div>
		<button
		  type="button"
		  onClick={() => {
			setFormState(user)  **// resets the form state back to the initial user**
			userDispatch({type: 'reset'}) **// resets the user state back to the initial user state**
		  }}
		  disabled={!isChanged || isPending} **// if isPending or !isChanged, this button is disabled**
		>
		  Reset
		</button>
		<button
		  type="submit"
		  disabled={(!isChanged && !isRejected) || isPending} **// disabled when not isChanged && !isRejected OR isPending**
		>
		  {isPending  **// if isPending, text = "...", if isRejected, text = "try again", if isChanged, text = "submit", otherwise text = "checkmark"**
			? '...'
			: isRejected
			? '✖ Try again'
			: isChanged
			? 'Submit'
			: '✔'}
		</button>
		{isRejected ? <pre style={{color: 'red'}}>{error.message}</pre> : null}
	  </div>
	</form>
  )
}

function UserDataDisplay() {
  const [{user}] = useUser()  **// destructuring the user property from the "state" value of the useUser return array.**
  return <pre>{JSON.stringify(user, null, 2)}</pre>
}

function App() {
  return (
	<div
	  style={{
		minHeight: 350,
		width: 300,
		backgroundColor: '#ddd',
		borderRadius: 4,
		padding: 10,
	  }}
	>
	  <UserProvider>  **// using the UserProvider function to wrap its children and provide the value array.**
		<UserSettings />
		<UserDataDisplay />
	  </UserProvider>
	</div>
  )
}

export default App
