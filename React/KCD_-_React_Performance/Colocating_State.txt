Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-01-06T11:37:09-05:00

====== Colocating State ======
Created Thursday 06 January 2022

**Colocating state** refers to pulling out parts of state from useReducer that can be managed on their own, and don't necessarily need to be managed by the Reducer.

For example, if you have a form, that does not need to be in a reducer, essentially copying over the state in useReducer just to manage those input values.

Instead, use **useState** for those, as that state is local to the form itself, and isn't needed by other components, except for maybe onSubmit. Think about it....using it in a dispatch means that all of the other state would get recopied every single time a user types (onChange).

**Example:**

// Fix "perf death by a thousand cuts"
// http://localhost:3000/isolated/exercise/06.js

import * as React from 'react'
import {
  useForceRerender,
  useDebouncedState,
  AppGrid,
  updateGridState,
  updateGridCellState,
} from '../utils'

const AppStateContext = React.createContext()
const AppDispatchContext = React.createContext()

const initialGrid = Array.from({length: 100}, () =>
  Array.from({length: 100}, () => Math.random() * 100),
)

function appReducer(state, action) {
  switch (action.type) {
	**// we're no longer managing the dogName state in our reducer**

	case 'UPDATE_GRID_CELL': {
	  return {...state, grid: updateGridCellState(state.grid, action)}
	}
	case 'UPDATE_GRID': {
	  return {...state, grid: updateGridState(state.grid)}
	}
	default: {
	  throw new Error(`Unhandled action type: ${action.type}`)
	}
  }
}

function AppProvider({children}) {
  const [state, dispatch] = React.useReducer(appReducer, {
	**// 💣 removed the dogName state because we're no longer managing that**
	grid: initialGrid,
  })
  return (
	<AppStateContext.Provider value={state}>
	  <AppDispatchContext.Provider value={dispatch}>
		{children}
	  </AppDispatchContext.Provider>
	</AppStateContext.Provider>
  )
}

function useAppState() {
  const context = React.useContext(AppStateContext)
  if (!context) {
	throw new Error('useAppState must be used within the AppProvider')
  }
  return context
}

function useAppDispatch() {
  const context = React.useContext(AppDispatchContext)
  if (!context) {
	throw new Error('useAppDispatch must be used within the AppProvider')
  }
  return context
}

function Grid() {
  const dispatch = useAppDispatch()
  const [rows, setRows] = useDebouncedState(50)
  const [columns, setColumns] = useDebouncedState(50)
  const updateGridData = () => dispatch({type: 'UPDATE_GRID'})
  return (
	<AppGrid
	  onUpdateGrid={updateGridData}
	  rows={rows}
	  handleRowsChange={setRows}
	  columns={columns}
	  handleColumnsChange={setColumns}
	  Cell={Cell}
	/>
  )
}
Grid = React.memo(Grid)

function Cell({row, column}) {
  const state = useAppState()
  const cell = state.grid[row][column]
  const dispatch = useAppDispatch()
  const handleClick = () => dispatch({type: 'UPDATE_GRID_CELL', row, column})
  return (
	<button
	  className="cell"
	  onClick={handleClick}
	  style={{
		color: cell > 50 ? 'white' : 'black',
		backgroundColor: `rgba(0, 0, 0, ${cell / 100})`,
	  }}
	>
	  {Math.floor(cell)}
	</button>
  )
}
Cell = React.memo(Cell)

function DogNameInput() {
  **// 🐨 replace the useAppState and useAppDispatch with a normal useState here**
**  // to manage the dogName locally within this component**

  **// In other words, useReducer is no longer managing this input, and instead we will manage it with useState locally.**
  const [dogName, setDogName] = React.useState("");

  function handleChange(event) {
	const newDogName = event.target.value
	**// 🐨 change this to call your state setter that you get from useState**
	**// Think about how many times you'd have to update / copy over the entire **
	**// state of the grid by having this state in a dispatch function**
	setDogName(dogName => newDogName);
  }

  return (
	<form onSubmit={e => e.preventDefault()}>
	  <label htmlFor="dogName">Dog Name</label>
	  <input
		value={dogName}
		onChange={handleChange}
		id="dogName"
		placeholder="Toto"
	  />
	  {dogName ? (
		<div>
		  <strong>{dogName}</strong>, I've a feeling we're not in Kansas anymore
		</div>
	  ) : null}
	</form>
  )
}
function App() {
  const forceRerender = useForceRerender()
  return (
	<div className="grid-app">
	  <button onClick={forceRerender}>force rerender</button>
	  <AppProvider>
		<div>
		  <DogNameInput />
		  <Grid />
		</div>
	  </AppProvider>
	</div>
  )
}

export default App

/*
eslint
  no-func-assign: 0,
*/
